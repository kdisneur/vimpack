// Code generated by MockGen. DO NOT EDIT.
// Source: internal/fetcher.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	internal "vimpack/internal"
)

// MockFetcherDisplay is a mock of FetcherDisplay interface
type MockFetcherDisplay struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherDisplayMockRecorder
}

// MockFetcherDisplayMockRecorder is the mock recorder for MockFetcherDisplay
type MockFetcherDisplayMockRecorder struct {
	mock *MockFetcherDisplay
}

// NewMockFetcherDisplay creates a new mock instance
func NewMockFetcherDisplay(ctrl *gomock.Controller) *MockFetcherDisplay {
	mock := &MockFetcherDisplay{ctrl: ctrl}
	mock.recorder = &MockFetcherDisplayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcherDisplay) EXPECT() *MockFetcherDisplayMockRecorder {
	return m.recorder
}

// AddPlugin mocks base method
func (m *MockFetcherDisplay) AddPlugin(arg0 *internal.Plugin) (*internal.UIPlugin, internal.UpdateFn) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlugin", arg0)
	ret0, _ := ret[0].(*internal.UIPlugin)
	ret1, _ := ret[1].(internal.UpdateFn)
	return ret0, ret1
}

// AddPlugin indicates an expected call of AddPlugin
func (mr *MockFetcherDisplayMockRecorder) AddPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlugin", reflect.TypeOf((*MockFetcherDisplay)(nil).AddPlugin), arg0)
}

// StartEventLoop mocks base method
func (m *MockFetcherDisplay) StartEventLoop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartEventLoop")
}

// StartEventLoop indicates an expected call of StartEventLoop
func (mr *MockFetcherDisplayMockRecorder) StartEventLoop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEventLoop", reflect.TypeOf((*MockFetcherDisplay)(nil).StartEventLoop))
}

// StopEventLoop mocks base method
func (m *MockFetcherDisplay) StopEventLoop() <-chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEventLoop")
	ret0, _ := ret[0].(<-chan interface{})
	return ret0
}

// StopEventLoop indicates an expected call of StopEventLoop
func (mr *MockFetcherDisplayMockRecorder) StopEventLoop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEventLoop", reflect.TypeOf((*MockFetcherDisplay)(nil).StopEventLoop))
}
